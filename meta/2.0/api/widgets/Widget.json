{
  "type": "Widget",
  "description": "Base class for all widgets",
  "extends": "NativeObject",
  "methods": {
    "children": [
      {
        "parameters": [],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all children of this widget."
      },
      {
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all children of this widget that match the given selector."
      }
    ],
    "siblings": [
      {
        "parameters": [],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all siblings of this widget."
      },
      {
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all siblings of this widget that match the given selector."
      }
    ],
    "find": [
      {
        "parameters": [],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all descendants of this widget."
      },
      {
        "parameters": [
          {
            "name": "selector",
            "type": "Selector",
            "description": "A selector expression or a predicate function to filter the results."
          }
        ],
        "returns": "WidgetCollection",
        "description": "Returns a (possibly empty) collection of all descendants of this widget that match the given selector."
      }
    ],
    "apply": [
      {
        "parameters": [
          {
            "name": "properties",
            "type": "Object",
            "description": "An object in the format `{Selector: {property: value, property: value, ... }, Selector: ...}`"
          }
        ],
        "returns": "this",
        "description": "Applies the given properties to all descendants that match the associated selector(s)."
      }
    ],
    "parent": [
      {
        "parameters": [],
        "returns": "Composite",
        "description": "Returns the parent of this widget or `null` if this widget is not appended to a parent."
      }
    ],
    "appendTo": [
      {
        "parameters": [
          {
            "name": "parent",
            "type": "Composite"
          }
        ],
        "returns": "this",
        "description": "Appends this widget to the given parent. The parent widget must support children (extending *Composite*). If the widget already has a parent, it is removed from the old parent."
      }
    ],
    "insertBefore": [
      {
        "parameters": [
          {
            "name": "widget",
            "type": "Widget"
          }
        ],
        "returns": "this",
        "description": "Inserts this widget directly before the given widget. If the widget already has a parent, it is removed from the old parent."
      }
    ],
    "insertAfter": [
      {
        "parameters": [
          {
            "name": "widget",
            "type": "Widget"
          }
        ],
        "returns": "this",
        "description": "Inserts this widget directly after the given widget. If the widget already has a parent, it is removed from the old parent."
      }
    ],
    "detach": [
      {
        "parameters": [],
        "returns": "this",
        "description": "Removes this widget from its parent."
      }
    ],
    "animate": [
      {
        "parameters": [
          {
            "name": "properties",
            "type": "{transform?: Transformation, opacity?: number}",
            "description": "The properties and target values to animate."
          },
          {
            "name": "options",
            "type": "AnimationOptions",
            "description": "Configures the animation itself."
          }
        ],
        "returns": "Promise<any>",
        "description": "Starts an animation that transforms the given properties from their current values to the given ones. Supported properties are *transform* and *opacity*. Returns a promise that is resolved once the animation is completed and is rejected if the animation is aborted."
      }
    ],
    "dispose": [
      {
        "parameters": [],
        "description": "Removes this widget from its parent and destroys it. Also disposes of all its children. Triggers a `remove` event on the parent and a `dispose` event on itself. The widget can no longer be used."
      }
    ],
    "isDisposed": [
      {
        "parameters": [],
        "returns": "boolean",
        "description": "Returns `true` if the widget has been disposed, otherwise `false`."
      }
    ]
  },
  "properties": {
    "id": {
      "type": "string",
      "description": "A string to identify the widget by using selectors. IDs are optional. It is strongly recommended that they are unique within a page."
    },
    "class": {
      "type": "string",
      "description": "A class name or a whitespace separated list of class names to identify the widget. Class names are arbitrary strings that describe a state or a category and help to select widgets using a selector expression. A class name may only contain alphanumeric characters, `_` and `-`. Class names can also be added or removed using the field `classList`."
    },
    "classList": {
      "type": "string[]",
      "description": "Provides convenient access to the list of class names set to this widget. Class names can either be set using the `class` property or by modifying the `classList` directly."
    },
    "enabled": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the widget can be operated."
    },
    "visible": {
      "type": "boolean",
      "default": "true",
      "description": "Whether the widget is visible."
    },
    "layoutData": {
      "type": "LayoutData",
      "description": "Shorthand for all layout properties. See [Layout](../layout.md)."
    },
    "left": {
      "type": "margin",
      "description": "The position of the widget's left edge relative to the parent or a sibling widget."
    },
    "right": {
      "type": "margin",
      "description": "The position of the widget's right edge relative to the parent or a sibling widget."
    },
    "top": {
      "type": "margin",
      "description": "The position of the widget's top edge relative to the parent or a sibling widget."
    },
    "bottom": {
      "type": "margin",
      "description": "The position of the widget's bottom edge relative to the parent or a sibling widget."
    },
    "width": {
      "type": "dimension",
      "description": "The width of the widget."
    },
    "height": {
      "type": "dimension",
      "description": "The height of the widget."
    },
    "centerX": {
      "type": "offset",
      "description": "The horizontal position of the widget's center relative to the parent's center."
    },
    "centerY": {
      "type": "offset",
      "description": "The vertical position of the widget's center relative to the parent's center."
    },
    "baseline": {
      "type": "Widget",
      "description": "The vertical position of the widget's baseline relative to a sibling widget."
    },
    "elevation": {
      "type": "number",
      "description": "The position of the widget on the z-axis. Currently only supported on Android 5.0+."
    },
    "cornerRadius": {
      "type": "number",
      "description": "Configure a widget to have rounded corners. Each corner is affected equally. Supported on iOS and Android 5.0+."
    },
    "font": {
      "type": "Font",
      "description": "The font used for the widget."
    },
    "backgroundImage": {
      "type": "Image",
      "description": "An image to be displayed on the widget's background. If the image is smaller than the widget, it will be tiled."
    },
    "bounds": {
      "type": "Bounds",
      "readonly": true,
      "description": "The actual location and size of the widget, relative to its parent."
    },
    "background": {
      "type": "Color",
      "description": "Background color of the widget."
    },
    "textColor": {
      "type": "Color",
      "description": "Text color of the widget."
    },
    "opacity": {
      "type": "number",
      "default": "1",
      "description": "Opacity of the entire widget, in the range `[0..1]`. Can be used for fade animations."
    },
    "transform": {
      "type": "Transformation",
      "description": "Modifications to the widget's shape, size, or position. Can be used for animations. **Note:** In Android the *transform* property does not affect the *bounds* property, while it does so in iOS."
    },
    "highlightOnTouch": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the entire widget should be highlighted while touched."
    },
    "win_theme": {
      "type": "string",
      "values": ["light", "dark", "default"],
      "default": "default",
      "description": "Controls the color scheme used for this widget. When set to `\"default\"` the theme is inherited from either the parent (if present) or the OS settings. Available only on windows."
    }
  },
  "events": {
    "tap": {
      "description": "Fired once when a finger briefly touched the widget.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        }
      }
    },
    "longpress": {
      "description": "Fired after pressing a widget for a specific amount of time (about a second), and again on lifting the finger.",
      "parameters": {
        "state": {
          "description": "'start' when the widget has been hold down long enough, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": "'start'|'end'|'cancel'"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        }
      }
    },
    "pan": {
      "description": "Fired continuously after a finger touching the widget moved for a certain distance.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": "'start'|'change'|'end'|'cancel'"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        },
        "translation": {
          "description": "Current touch coordinates relative to the coordinates of the first touch.",
          "type": "{x: number, y: number}"
        },
        "velocity": {
          "description": "Current touch velocity in pixels per second.",
          "type": "{x: number, y: number}"
        }
      }
    },
    "pan:up": {
      "description": "Fired when a finger starts moving up.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": "'start'|'change'|'end'|'cancel'"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        },
        "translation": {
          "description": "Current touch coordinates relative to the coordinates of the first touch.",
          "type": "{x: number, y: number}"
        },
        "velocity": {
          "description": "Current touch velocity in pixels per second.",
          "type": "{x: number, y: number}"
        }
      }
    },
    "pan:down": {
      "description": "Fired when a finger starts moving down.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": "'start'|'change'|'end'|'cancel'"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        },
        "translation": {
          "description": "Current touch coordinates relative to the coordinates of the first touch.",
          "type": "{x: number, y: number}"
        },
        "velocity": {
          "description": "Current touch velocity in pixels per second.",
          "type": "{x: number, y: number}"
        }
      }
    },
    "pan:left": {
      "description": "Fired when a finger starts moving left.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": "'start'|'change'|'end'|'cancel'"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        },
        "translation": {
          "description": "Current touch coordinates relative to the coordinates of the first touch.",
          "type": "{x: number, y: number}"
        },
        "velocity": {
          "description": "Current touch velocity in pixels per second.",
          "type": "{x: number, y: number}"
        }
      }
    },
    "pan:right": {
      "description": "Fired when a finger starts moving right.",
      "parameters": {
        "state": {
          "description": "'start' when the finger starts moving, 'change' while the finger is moving, 'end' when the finger has been lifted and 'cancel' when the gesture has been interrupted.",
          "type": "'start'|'change'|'end'|'cancel'"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        },
        "translation": {
          "description": "Current touch coordinates relative to the coordinates of the first touch.",
          "type": "{x: number, y: number}"
        },
        "velocity": {
          "description": "Current touch velocity in pixels per second.",
          "type": "{x: number, y: number}"
        }
      }
    },
    "swipe:up": {
      "description": "Fired when a finger moves up quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        }
      }
    },
    "swipe:down": {
      "description": "Fired when a finger moves down quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        }
      }
    },
    "swipe:left": {
      "description": "Fired when a finger moves left quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        }
      }
    },
    "swipe:right": {
      "description": "Fired when a finger moves right quickly.",
      "parameters": {
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number}[]"
        }
      }
    },
    "touchstart": {
      "description": "Fired when a widget is touched. See [Touch Events](../touch.md).",
      "parameters": {
        "time": {
          "description": "Number of milliseconds since the start of the app.",
          "type": "number"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number, absoluteX: number, absoluteY: number}[]"
        }
      }
    },
    "touchmove": {
      "description": "Fired repeatedly while swiping across the screen.",
      "parameters": {
        "time": {
          "description": "Number of milliseconds since the start of the app.",
          "type": "number"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number, absoluteX: number, absoluteY: number}[]"
        }
      }
    },
    "touchend": {
      "description": "Fired when a touch ends on the same widget than it started on.",
      "parameters": {
        "time": {
          "description": "Number of milliseconds since the start of the app.",
          "type": "number"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number, absoluteX: number, absoluteY: number}[]"
        }
      }
    },
    "touchcancel": {
      "description": "Fired instead of touchend when the touch ends on another widget than it started on.",
      "parameters": {
        "time": {
          "description": "Number of milliseconds since the start of the app.",
          "type": "number"
        },
        "touches": {
          "description": "Touch coordinates relative to the origin coordinates of the widget.",
          "type": "{x: number, y: number, absoluteX: number, absoluteY: number}[]"
        }
      }
    },
    "resize": {
      "description": "Fired when the widget's size has changed. You can use this event to apply new [*layoutData*](#layoutdata).",
      "parameters": {
        "left": {
          "description": "The horizontal offset from the parent's left edge in dip.",
          "type": "number"
        },
        "top": {
          "description": "The vertical offset from the parent's top edge in dip.",
          "type": "number"
        },
        "width": {
          "description": "The width of the widget in dip.",
          "type": "number"
        },
        "height": {
          "description": "The height of the widget in dip.",
          "type": "number"
        }
      }
    },
    "dispose": {
      "description": "Fired when the widget is about to be disposed. At this point the widget and its children are still accessible."
    }
  },
  "links": [
    {
      "title": "Understanding layouts in Tabris.js",
      "path": "../layout.md"
    },
    {
      "title": "Understanding gesture events in Tabris.js",
      "path": "../touch.md"
    }
  ]
}
