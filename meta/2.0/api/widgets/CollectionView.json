{
  "type": "CollectionView",
  "description": "A scrollable list that displays data items in cells, one per row. Cells are created on demand and filled with widgets in the *initializeCell* callback.",
  "extends": "Widget",
  "properties": {
    "itemHeight": {
      "type": "number|((item: any, cellType: string) => number)",
      "description": "The height of a collection cell. If set to a function, this function will be called for every item, providing the item and the cell type as parameters, and must return the item height for the given item."
    },
    "items": {
      "type": "any[]",
      "description": "An array of data items to be displayed by the collection view. For dynamic content, use the methods `insert` and `remove` instead of setting this property directly."
    },
    "initializeCell": {
      "type": "(cell: Cell, cellType: string) => void",
      "static": true,
      "description": "A callback used to initialize a collection cell by attaching widget and *change:item* listener. Cells are created by the framework and recycled on scrolling."
    },
    "cellType": {
      "type": "string|((item: any) => string)",
      "description": "The name of the cell type to use for a given item. This name will be passed to the `initializeCell` and `itemHeight` functions. Cells will be reused only by items that require the same cell type. If set to a function, this function will be called for every item, providing the item as a parameter, and must return a name for the cell type to use for the given item."
    },
    "refreshEnabled": {
      "type": "boolean",
      "default": "false",
      "description": "Enables the user to trigger a refresh by using the pull-to-refresh gesture."
    },
    "refreshIndicator": {
      "type": "boolean",
      "default": "false",
      "description": "Whether the refresh indicator is currently visible. Will be set to `true` when a *refresh* event is triggered. Reset it to `false` when the refresh is finished."
    },
    "refreshMessage": {
      "type": "string",
      "default": "\"\"",
      "description": "The message text displayed together with the refresh indicator. Currently not supported on Android."
    },
    "firstVisibleIndex": {
      "type": "number",
      "readonly": true,
      "description": "The first item that is currently visible on screen."
    },
    "lastVisibleIndex": {
      "type": "number",
      "readonly": true,
      "description": "The last item that is currently visible on screen."
    },
    "columnCount": {
      "type": "number",
      "default": 1,
      "description": "The number of columns to display in the collection view. If set to a value `n > 1`, each row will contain `n` items. The available space will be equally distributed between columns."
    }
  },
  "events": {
    "select": {
      "description": "Fired when a collection item is selected.",
      "parameters": {
        "item": {
          "description": "The item that was selected.",
          "type": "any"
        },
        "index": {
          "description": "The index of the selected item.",
          "type": "number"
        }
      }
    },
    "refresh": {
      "description": "Fired when the user requested a refresh. An event listener should reset the *refreshIndicator* property when refresh is finished."
    },
    "scroll": {
      "description": "Fired while the collection view is scrolling.",
      "parameters": {
        "deltaX": {
          "description": "Currently always 0.",
          "type": "number"
        },
        "deltaY": {
          "description": "The delta of the scroll position. Positive when scrolling up and negative when scrolling down.",
          "type": "number"
        }
      }
    }
  },
  "methods": {
    "insert": [
      {
        "parameters": [
          {
            "name": "items",
            "type": "any[]"
          }
        ],
        "description": "Inserts the given items into this view. Items are added at the end. This operation will modify the *items* property."
      },
      {
        "parameters": [
          {
            "name": "items",
            "type": "any[]"
          },
          {
            "name": "index",
            "type": "number",
            "description": "The position to insert the items at. If a negative index is given, it is interpreted as relative to the end. If the given index is greater than the item count, new items will be appended at the end. "
          }
        ],
        "description": "Inserts the given items into this view at the given index. This operation will modify the *items* property."
      }
    ],
    "remove": [
      {
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the item to remove. If this is negative, it is interpreted as relative to the end."
          }
        ],
        "description": "Removes the item at the given index from this view. This operation will modify the *items* property."
      },
      {
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the first item to remove. If this is negative, it is interpreted as relative to the end."
          },
          {
            "name": "count",
            "type": "number",
            "description": "The number of items to remove."
          }
        ],
        "description": "Removes *count* items beginning with the given index from this view. This operation will modify the *items* property."
      }
    ],
    "refresh": [
      {
        "parameters": [],
        "description": "Triggers a refresh of all visible items. This will issue *change:item* events on the corresponding cells."
      },
      {
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the item that was changed."
          }
        ],
        "description": "Triggers a refresh of the item with the given index. If the item is scrolled into view, an *change:item* event will be issued on the corresponding cell."
      }
    ],
    "reveal": [
      {
        "parameters": [
          {
            "name": "index",
            "type": "number",
            "description": "The index of the item to reveal. If this is negative, it is interpreted as relative to the end"
          }
        ],
        "description": "Scrolls the item with the given index into view."
      }
    ]
  },
  "links": [
    {
      "title": "CollectionView example",
      "path": "${GITHUB_BRANCH}/snippets/collectionview.js"
    }
  ]
}
